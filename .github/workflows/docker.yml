---
    name: Docker Image CI
    
    on:
      schedule:
        - cron: '0 0 * * *'
      workflow_dispatch:
    
    jobs:
      # Get versions
      get_latest:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
              fetch-tags: true
    
          - name: get versions
            id: get_latest
            run: |
              LOCAL_VERSION=$(/usr/bin/git describe --tags --abbrev=0)
              LATEST=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/signum-network/signum-node/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')
              echo "local_version=${LOCAL_VERSION#v}" >> $GITHUB_OUTPUT
              echo "latest=${LATEST}" >> $GITHUB_OUTPUT
              echo "latest_short=${LATEST#v}" >> $GITHUB_OUTPUT
    
        outputs:
          local_version: ${{ steps.get_latest.outputs.local_version }}
          latest: ${{ steps.get_latest.outputs.latest }}
          latest_short: ${{ steps.get_latest.outputs.latest_short }}
    
      # Build dedicated server image
      build:
        runs-on: ubuntu-latest
        needs: get_latest
        if: ${{ ((github.event_name == 'workflow_dispatch') || ((needs.get_latest.outputs.latest_short != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success'))) }}
        strategy:
          fail-fast: false
          matrix:
            platform:
              - linux/amd64
              - linux/arm64
        steps:
          - name: Prepare platform
            run: |
              platform=${{ matrix.platform }}
              echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Checkout signum-node
            uses: actions/checkout@v4
            with:
              repository: 'signum-network/signum-node'
              ref: ${{ needs.get_latest.outputs.latest }}
              path: signum-node
    
          - name: Docker meta
            id: meta
            uses: docker/metadata-action@v5
            with:
              images: ${{ vars.REGISTRY_IMAGE }}
    
          - name: Set up Qemu
            uses: docker/setup-qemu-action@v3
      
          - name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v3
    
          - name: Docker registry authentication
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    
          - name: Build and push by digest
            id: build
            uses: docker/build-push-action@v5
            with:
              file: Dockerfile
              context: .
              platforms: ${{ matrix.platform }}
              labels: ${{ steps.meta.outputs.labels }}
              pull: true
              cache-from: type=gha
              cache-to: type=gha,mode=max
              provenance: mode=min
              sbom: true
              outputs: type=image,name=${{ vars.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
    
          - name: Build and load
            id: build-load
            uses: docker/build-push-action@v5
            with:
              file: Dockerfile
              context: .
              platforms: ${{ matrix.platform }}
              labels: ${{ steps.meta.outputs.labels }}
              pull: true
              cache-from: type=gha
              load: true
              tags: ${{ needs.get_latest.outputs.latest }}-${{ env.PLATFORM_PAIR }}
    
          - name: Export digest
            run: |
              mkdir -p /tmp/digests
              mkdir -p /tmp/gzs
              digest="${{ steps.build.outputs.digest }}"
              touch "/tmp/digests/${digest#sha256:}"
              docker save ${{ needs.get_latest.outputs.latest }}-${{ env.PLATFORM_PAIR }} | gzip > /tmp/gzs/${{ needs.get_latest.outputs.latest }}-${{ env.PLATFORM_PAIR }}.tar.gz
    
          - name: Upload digest
            uses: actions/upload-artifact@v4
            with:
              name: digests-${{ env.PLATFORM_PAIR }}
              path: /tmp/digests/*
              if-no-files-found: error
              retention-days: 1
    
          - name: Upload release artifact
            uses: actions/upload-artifact@v4
            with:
              name: ${{ needs.get_latest.outputs.latest }}-${{ env.PLATFORM_PAIR }}.tar.gz
              path: /tmp/gzs/*
              if-no-files-found: error
              retention-days: 1
    
      # Merge the digests and upload image
      merge:
        runs-on: ubuntu-latest
        needs: [get_latest, build]
        if: ${{ ((github.event_name == 'workflow_dispatch') || ((needs.get_latest.outputs.latest_short != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success'))) }}
        steps:
          - name: Download digests
            uses: actions/download-artifact@v4
            with:
              path: /tmp/digests
              pattern: digests-*
              merge-multiple: true
    
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
    
          - name: Docker meta
            id: meta
            uses: docker/metadata-action@v5
            with:
              images: ${{ vars.REGISTRY_IMAGE }}
    
          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    
          - name: Create manifest list and push
            working-directory: /tmp/digests
            run: |
              docker buildx imagetools create \
                -t ${{ vars.REGISTRY_IMAGE }}:latest \
                -t ${{ vars.REGISTRY_IMAGE }}:${{ needs.get_latest.outputs.latest }}  \
                $(printf '${{ vars.REGISTRY_IMAGE }}@sha256:%s ' *)
    
      update_repo:        
        runs-on: ubuntu-latest
        needs:  [get_latest, build, merge]
        if: ${{ ((github.event_name == 'workflow_dispatch') || ((needs.get_latest.outputs.latest_short != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success'))) }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4
    
          - name: Checkout signum-node
            uses: actions/checkout@v4
            with:
              repository: 'signum-network/signum-node'
              ref: ${{ needs.get_latest.outputs.latest }}
              path: signum-node
    
          - name: Download release artifacts
            uses: actions/download-artifact@v4
            with:
              path: /tmp/gzs
              pattern: ${{ needs.get_latest.outputs.latest }}-*
              merge-multiple: true

          - uses: ncipollo/release-action@v1
            with:
              allowUpdates: true
              artifactErrorsFailBuild: true
              artifacts: "/tmp/gzs/*.tar.gz"
              body: "See the [Release](https://github.com/signum-network/signum-node/releases/tag/${{ needs.get_latest.outputs.latest }}) for the changes in this release."
              discussionCategory: "~Releases"
              makeLatest: true
              removeArtifacts: true
              tag: ${{ needs.get_latest.outputs.latest }}

          - name: Update and push
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              FILE_TO_COMMIT: README.md
              DESTINATION_BRANCH: main
            run: |
              echo "## [signum-network/signum-node](https://github.com/signum-network/signum-node/) Containerized Dedicated Server  " > README.md
              echo "[![Docker Image CI](https://github.com/gittrekt/signum-node_container_buildbot/actions/workflows/docker.yml/badge.svg?event=schedule)](https://github.com/gittrekt/signum-node_container_buildbot/actions/workflows/docker.yml)" >> README.md
              echo "" >> README.md
              echo "Check the offical signum-network for information  " >> README.md
              echo "" >> README.md
              echo "<details>" >> README.md
              echo "<summary>Signum-Node README</summary>" >> README.md
              echo "" >> README.md
              echo "$(cat signum-node/README.md)" >> README.md
              echo "</details>" >> README.md
              export MESSAGE="chore: Update README.md with release ${{ needs.get_latest.outputs.latest }}"
              export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
              export CONTENT=$( base64 -i $FILE_TO_COMMIT )
              gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
                --field message="$MESSAGE" \
                --field content="$CONTENT" \
                --field encoding="base64" \
                --field branch="$DESTINATION_BRANCH" \
                --field sha="$SHA"
              gh cache delete --all